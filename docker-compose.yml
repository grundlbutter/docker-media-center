---

services:
  plex:
    image: lscr.io/linuxserver/plex
    deploy:
      resources:
        reservations:
          devices:
            - capabilities:
              - gpu
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - NVIDIA_VISIBLE_DEVICES=ALL
      - NVIDIA_DRIVER_CAPABILITIES=all
      - PLEX_CLAIM= #optional
    volumes:
      - /home/user/Configs:/config
      - /media/storage/TV:/tv
      - /media/storage/Movies:/movies
      - /media/storage/Anime-Movies:/animemovies
      - /media/storage/Anime-Series:/animeseries
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /home/user/Configs/Prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped  
    
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022 #optional
    volumes:
      - /home/user/Configs/Radarr:/config
      - /media/storage/Downloads:/Downloads
      - /media/storage/Movies:/Movies
    ports:
      - 7878:7878
    restart: unless-stopped
    
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022
    volumes:
      - /home/user/Configs/Sonarr:/config
      - /media/storage/Downloads:/Downloads
      - /media/storage/TV:/TV
    ports:
      - 8989:8989
    restart: unless-stopped

  sonarr-anime:
    image: linuxserver/sonarr
    container_name: sonarr-anime
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022
    volumes:
      - /home/storage/Configs/Sonarr-anime:/config
      - /media/storage/Downloads:/Downloads
      - /media/storage/Anime-Series:/animeseries

    ports:
      - 9090:8989
    restart: unless-stopped

  requestrr:
    image: lscr.io/linuxserver/requestrr
    container_name: requestrr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - /home/user/Configs/Requestrr:/config
    ports:
      - 4545:4545
    restart: unless-stopped
    
  overseerr:
    image: lscr.io/linuxserver/overseerr
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - /home/user/Configs/Overseerr:/config
    ports:
      - 5055:5055
    restart: unless-stopped
    
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - /home/user/Configs/Bazarr:/config
      - /media/storage/TV:/TV
    ports:
      - 6767:6767
    restart: unless-stopped

  sabnzbd:
    image: ghcr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
    volumes:
      - /home/user/Configs/Sabnzbd:/config
      - /media/storage/Downloads:/Downloads
      - /media/storage/Downloads/Incomplete:/incomplete-downloads #optional
    ports:
      - 8080:8080
    restart: unless-stopped
    
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "80:80/tcp"
    environment:
      TZ: 'America/Los_Angeles'
      WEBPASSWORD: '${SECUREPASSWORD}'
    # Volumes store your data between container upgrades
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
    
  dashy:
    container_name: Dashy
    image: lissy93/dashy
    # Set port that web service will be served on. Keep container port as 80
    ports:
      - 4000:80
    # Set any environmental variables
    environment:
      - NODE_ENV=production
    # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
    #  - UID=1000
    #  - GID=1000
    # Specify restart policy
    restart: unless-stopped
    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  kavita:
    image: kizaing/kavita:latest    # Change latest to nightly for latest develop builds (can't go back to stable)
    container_name: kavita
    volumes:
      - /media/storage/reading/manga:/manga            # Manga is just an example you can have the name you want. See the following
      - /media/storage/reading/comics:/comics          # Use as many as you want
      - /media/storage/reading/magazines:/magazines            #
      - /home/user/Configs/kavita:/kavita/config     # Change './data if you want to have the config files in a different place.     # /kavita/config must not be changed
    environment:
      - TZ=America/Los_Angeles
    ports:
      - 5000:5000 # Change the public port (the first 5000) if you have conflicts with other services
    restart: unless-stopped
    
  dashy:
    container_name: Dashy

    # Pull latest image from DockerHub
    image: lissy93/dashy
    ports:
      - 4000:80
    # Set any environmental variables
    environment:
      - NODE_ENV=production
    # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
    #  - UID=1000
    #  - GID=1000
    # Specify restart policy
    restart: unless-stopped
    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
      
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022
    volumes:
      - /home/user/Configs/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9292:9090
    restart: unless-stopped

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022
    volumes:
      - /:/host:ro,rslave
    ports:
      - 9100:9090
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles
      - UMASK_SET=022
    ports:
      - 3000:3000
    restart: unless-stopped
    
  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    ports:
      - 8200:4533
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles    
      - ND_SCANINTERVAL=1m
      - ND_LOGLEVEL=info
      - ND_PORT=4533
      - ND_TRANSCODINGCACHESIZE=100MB
      - ND_SESSIONTIMEOUT=24h
    volumes:
      - /home/user/Configs/Navidrome/data:/data
      - /media/storage/audio:/music:ro
